from aiogram import types
from loader import dp, bot
from aiogram.types import CallbackQuery
from states import news_bot
from aiogram.dispatcher import FSMContext
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton
from sql_func import *
from keyboards.inline.inline_kb_adm import ikb_adm

markup_conf = InlineKeyboardMarkup(row_width=2,
                                inline_keyboard=[
                                    [
                                        InlineKeyboardButton(text='–û—Ç–º–µ–Ω–∏—Ç—å', callback_data='quit')
                                    ]
                                ])

markup_admin = InlineKeyboardMarkup(row_width=2,
                                inline_keyboard=[
                                    [
                                        InlineKeyboardButton(text='–î–∞', callback_data='confirm'),
                                        InlineKeyboardButton(text='–û—Ç–º–µ–Ω–∏—Ç—å', callback_data='quit')
                                    ]
                                ])



@dp.callback_query_handler(text='–ê–¥–º –Ω–æ–≤')
async def advertising(call: CallbackQuery):
    await news_bot.text.set()
    await call.message.answer("üì¢ –ü—Ä–∏—à–ª–∏—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏ –Ω–æ–≤–æ—Å—Ç–µ–π", reply_markup=markup_conf)

@dp.message_handler(state=news_bot.text, content_types=types.ContentType.TEXT)
async def news_public(message: types.Message, state: FSMContext):
    await state.update_data(text=message.text)
    await message.answer("–¢–µ–ø–µ—Ä—å –ø—Ä–∏—à–ª–∏ —Ñ–æ—Ç–æ –¥–ª—è –Ω–æ–≤–æ—Å—Ç–∏\n–ò–ª–∏ –ø—Ä–∏—à–ª–∏: - | –ï—Å–ª–∏ –Ω–æ–≤–æ—Å—Ç—å –±–µ–∑ —Ñ–æ—Ç–æ")
    await news_bot.next()

@dp.message_handler(state=news_bot.text)
async def no_text(message: types.Message, state: FSMContext):
    await message.answer("–≠—Ç–æ –Ω–µ —Ç–µ–∫—Å—Ç | –ü—Ä–∏—à–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ —Ç–µ–∫—Å—Ç–æ–º", reply_markup=markup_conf)

@dp.message_handler(lambda message: message.text=='-', state=news_bot.preview)
async def no_previews(message: types.Message, state: FSMContext):
    await state.update_data(preview=None)
    await message.answer("üì¢ –°–æ–æ–±—â–µ–Ω–∏–µ –≥–æ—Ç–æ–≤–æ –∑–∞–ø—É—Å–∫–∞—Ç—å —Ä–∞—Å—Å—ã–ª–∫—É?", reply_markup=markup_admin)

@dp.message_handler(state=news_bot.preview, content_types=types.ContentType.PHOTO)
async def previews(message: types.Message, state: FSMContext):
    photo_id = message.photo[-1].file_id
    await state.update_data(preview=photo_id)
    await message.answer("üì¢ –°–æ–æ–±—â–µ–Ω–∏–µ –≥–æ—Ç–æ–≤–æ –∑–∞–ø—É—Å–∫–∞—Ç—å —Ä–∞—Å—Å—ã–ª–∫—É?", reply_markup=markup_admin)

@dp.callback_query_handler(text='confirm', state=news_bot.preview)
async def news_confirm(call: CallbackQuery, state = FSMContext):
    sent = 0
    successful = 0
    not_successful = 0
    data = await state.get_data()
    text = data.get('text')
    preview = data.get('preview')
    if preview == None:
        for user in check_all_users():
            sent += 1
            try:
                await dp.bot.send_message(chat_id=user, text=f"<b>[üì¢ –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ü–∏—è]</b>{text}")
                successful += 1
            except Exception as err:
                not_successful +=1
        await call.message.edit_text("üì¢ –†–∞—Å—Å—ã–ª–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!\n"
        f"üì¢ –í—Å–µ–≥–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω–æ: {sent}\n"
        f"‚úÖ –£—Å–ø–µ—à–Ω—ã—Ö –æ—Ç–ø—Ä–∞–≤–æ–∫: {successful}\n"
        f"‚ö†Ô∏è –ù–µ —É—Å–ø–µ—à–Ω—ã—Ö: {not_successful}")
    else:
        for user in check_all_users():
            sent += 1
            try:
                await dp.bot.send_photo(chat_id=user, caption=text, photo=preview)
                successful += 1
            except Exception as err:
                print(err)
                not_successful +=1
        await call.message.edit_text("üì¢ –†–∞—Å—Å—ã–ª–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!\n"
        f"|üì¢ –í—Å–µ–≥–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω–æ: {sent}\n"
        f"|‚úÖ –£—Å–ø–µ—à–Ω—ã—Ö –æ—Ç–ø—Ä–∞–≤–æ–∫: {successful}\n"
        f"|‚ö†Ô∏è –ù–µ —É—Å–ø–µ—à–Ω—ã—Ö: {not_successful}")
    await state.finish()
    await bot.answer_callback_query(call.id)

@dp.callback_query_handler(text='quit', state=news_bot.preview)
async def news_no_confirm(call: CallbackQuery, state = FSMContext):
    await call.message.delete()
    await call.message.answer("–ü—É–±–ª–∏–∫–∞—Ü–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞!", reply_markup=ikb_adm)
    await state.finish()
    await bot.answer_callback_query(call.id)

