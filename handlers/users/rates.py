import asyncio

from aiogram import types 
from loader import dp
from sql_func import *
from data.config import *
from random import choice
from utils.rates_user import *
from utils.link_user import *
from utils.cup_rates import *
from random import randint
from fuzzywuzzy import fuzz
from fuzzywuzzy import process


@dp.message_handler(lambda message: message.text.replace(" ", "").replace('k', '000').replace('–∫', '000').isdigit() and check_game(message.from_user.id)=='football')
async def trigers_foot(message: types.Message):
    user_id = message.from_user.id
    sum_bid = int(message.text.replace('k', '000').replace('–∫', '000'))
    if sum_bid >= 100:
        if check_money(sum_bid, user_id):
            dice_msg = await bot.send_dice(message.chat.id, emoji='‚öΩ')
            football_num = dice_msg.dice.value
            profit = football_profit.get(football_num)
            profit_sum = round(sum_bid * profit - sum_bid, 0)
            print(profit_sum)
            add_money(profit_sum, user_id)
            await asyncio.sleep(4.9)
            if profit_sum > 0:
                await message.answer(f"<b>[–ò–≥—Ä—ã - –§—É—Ç–±–æ–ª ‚öΩ]</b> {link_user(user_id)}, –≤—ã –≤—ã–∏–≥—Ä–∞–ª–∏ {ranks_int(profit_sum)}$ ({profit}x) {choice(joi)}\n"
                f"{check_balance(user_id, True)}", reply_markup=rates_inl('‚öΩ', user_id, "–§—É—Ç"))
            elif profit_sum == 0:
                await message.answer(f"<b>[–ò–≥—Ä—ã -  –§—É—Ç–±–æ–ª ‚öΩ]</b> {link_user(user_id)}, –¥–µ–Ω—å–≥–∏ –æ—Å—Ç–∞—é—Ç—Å—è —É –≤–∞—Å ({profit}x) {choice(joi)}\n"
                f"{check_balance(user_id, True)}", reply_markup=rates_inl('‚öΩ', user_id, "–§—É—Ç"))
            else:
                await message.answer(f"<b>[–ò–≥—Ä—ã -  –§—É—Ç–±–æ–ª ‚öΩ]</b> {link_user(user_id)}, –≤—ã –ø—Ä–æ–∏–≥—Ä–∞–ª–∏ {ranks_int(profit_sum*-1)}$ ({profit}x) {choice(sad)}\n"
                f"{check_balance(user_id, True)}", reply_markup=rates_inl('‚öΩ', user_id, "–§—É—Ç"))
        else:
            await message.answer(f"<b>[–ò–≥—Ä—ã - –§—É—Ç–±–æ–ª ‚öΩ]</b> {link_user(user_id)}, —É –≤–∞—Å –Ω–µ –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤ {choice(sad)}")
    else:
        await message.answer(f"<b>[–ò–≥—Ä—ã - –§—É—Ç–±–æ–ª ‚öΩ]</b> {link_user(user_id)}, –º–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —Å—Ç–∞–≤–∫–∞ 100$ {choice(info)}")


@dp.message_handler(lambda message: message.text.replace(" ", "").replace('k', '000').replace('–∫', '000').isdigit() and check_game(message.from_user.id)=='casino')
async def trigers_cas(message: types.Message):
    user_id = message.from_user.id
    user_url = message.from_user.url
    sums = message.text.replace(" ", "")
    if int(sums) >= 100:
        if check_money(int(sums), user_id):
            st_slot, nd_slot, rd_slot = choice(item_list), choice(item_list), choice(item_list)
            profit = round(item_profit.get(st_slot) + item_profit.get(nd_slot) + item_profit.get(rd_slot), 1)
            profit_sum = int(int(sums) * profit - int(sums))
            add_money(profit_sum, user_id)
            if profit_sum > 0:
                await message.answer(f"<b>[–ò–≥—Ä—ã - –ö–∞–∑–∏–Ω–æ üé∞]</b> <a href='{user_url}'>{check_name(user_id)}</a>, –≤—ã –≤—ã–∏–≥—Ä–∞–ª–∏ {ranks_int(profit_sum)}$ {choice(joi)}\n"
                f"üé∞ –í—ã–ø–∞–ª–∏ —Å–ª–æ—Ç—ã: [{st_slot}|{nd_slot}|{rd_slot}] (x{profit})\n"
                f"{check_balance(user_id, True)}", reply_markup=rates_inl('üé∞', user_id, "–ö–∞–∑"))
            elif profit_sum == 0:
                await message.answer(f"<b>[–ò–≥—Ä—ã - –ö–∞–∑–∏–Ω–æ üé∞]</b> <a href='{user_url}'>{check_name(user_id)}</a>, –¥–µ–Ω—å–≥–∏ –æ—Å—Ç–∞—é—Ç—Å—è —É –≤–∞—Å {choice(joi)}\n"
                f"üé∞ –í—ã–ø–∞–ª–∏ —Å–ª–æ—Ç—ã: [{st_slot}|{nd_slot}|{rd_slot}] (x{profit})\n"
                f"{check_balance(user_id, True)}", reply_markup=rates_inl('üé∞', user_id, "–ö–∞–∑"))
            else:
                await message.answer(f"<b>[–ò–≥—Ä—ã - –ö–∞–∑–∏–Ω–æ üé∞]</b> <a href='{user_url}'>{check_name(user_id)}</a>, –≤—ã –ø—Ä–æ–∏–≥—Ä–∞–ª–∏ {ranks_int(profit_sum*-1)}$ {choice(sad)}\n"
                f"üé∞ –í—ã–ø–∞–ª–∏ —Å–ª–æ—Ç—ã: [{st_slot}|{nd_slot}|{rd_slot}] (x{profit})\n"
                f"{check_balance(user_id, True)}", reply_markup=rates_inl('üé∞', user_id, "–ö–∞–∑"))
        else:
            await message.answer(f"<b>[–ò–≥—Ä—ã - –ö–∞–∑–∏–Ω–æ üé∞]</b> <a href='{user_url}'>{check_name(user_id)}</a>, —É –≤–∞—Å –Ω–µ –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤ {choice(sad)}")
    else:
        await message.answer(f"<b>[–ò–≥—Ä—ã - –ö–∞–∑–∏–Ω–æ üé∞]</b> <a href='{user_url}'>{check_name(user_id)}</a>, –º–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —Å—Ç–∞–≤–∫–∞ 100$ {choice(info)}")


@dp.message_handler(lambda message: message.text.replace(" ", "").replace('k', '000').replace('–∫', '000').isdigit() and check_game(message.from_user.id)=='darts')
async def trigers_bowl(message: types.Message):
    user_id = message.from_user.id
    chat_id = message.chat.id
    sum_bid = int(message.text.replace('k', '000').replace('–∫', '000'))
    if sum_bid >= 100:
        if check_money(sum_bid, user_id):
            dice_msg = await bot.send_dice(chat_id, emoji='üéØ')
            darts_num = dice_msg.dice.value
            profit = darts_profit.get(darts_num)
            profit_sum = int(sum_bid * profit - sum_bid)
            add_money(profit_sum, user_id)
            await asyncio.sleep(4.9)
            if profit_sum > 0:
                await message.answer(f"<b>[–ò–≥—Ä—ã - –î–∞—Ä—Ç—Å üéØ]</b> {link_user(user_id)}, –≤—ã –≤—ã–∏–≥—Ä–∞–ª–∏ {ranks_int(profit_sum)}$ ({profit}x) {choice(joi)}\n"
                f"{check_balance(user_id, True)}", reply_markup=rates_inl('üéØ', user_id, "–î–∞—Ä"))
            elif profit_sum == 0:
                await message.answer(f"<b>[–ò–≥—Ä—ã - –î–∞—Ä—Ç—Å üéØ]</b> {link_user(user_id)}, –¥–µ–Ω—å–≥–∏ –æ—Å—Ç–∞—é—Ç—Å—è —É –≤–∞—Å ({profit}x) {choice(joi)}\n"
                f"{check_balance(user_id, True)}", reply_markup=rates_inl('üéØ', user_id, "–î–∞—Ä"))
            else:
                await message.answer(f"<b>[–ò–≥—Ä—ã - –î–∞—Ä—Ç—Å üéØ]</b> {link_user(user_id)}, –≤—ã –ø—Ä–æ–∏–≥—Ä–∞–ª–∏ {ranks_int(profit_sum*-1)}$ ({profit}x) {choice(sad)}\n"
                f"{check_balance(user_id, True)}", reply_markup=rates_inl('üéØ', user_id, "–î–∞—Ä"))
        else:
            await message.answer(f"<b>[–ò–≥—Ä—ã - –î–∞—Ä—Ç—Å üéØ]</b> {link_user(user_id)}, —É –≤–∞—Å –Ω–µ –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤ {choice(sad)}")
    else:
        await message.answer(f"<b>[–ò–≥—Ä—ã - –î–∞—Ä—Ç—Å üéØ]</b> {link_user(user_id)}, –º–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —Å—Ç–∞–≤–∫–∞ 100$ {choice(info)}")

@dp.message_handler(lambda message: message.text.replace(" ", "").replace('k', '000').replace('–∫', '000').isdigit() and check_game(message.from_user.id)=='bowl')
async def trigers_darts(message: types.Message):
    user_id = call.from_user.id
    chat_id = call.message.chat.id
    sum_bid = int(call.data.split()[1])
    if sum_bid >= 100:
        if check_money(sum_bid, user_id):
            dice_msg = await bot.send_dice(chat_id, emoji='üé≥')
            bowl_num = dice_msg.dice.value
            profit = football_profit.get(bowl_num)
            profit_sum = int(sum_bid * profit - sum_bid)
            add_money(profit_sum, user_id)
            print(bowl_num)
            await asyncio.sleep(4.9)
            if profit_sum > 0:
                await message.answer(f"<b>[–ò–≥—Ä—ã - –ë–æ—É–ª–∏–Ω–≥ üé≥]</b> {link_user(user_id)}, —Å—Ç—Ä–∞–π–∫! {ranks_int(profit_sum)}$ ({profit}x) {choice(joi)}\n"
                f"{check_balance(user_id, True)}", reply_markup=rates_inl('üé≥', user_id, "–ë–æ—É"))
            elif profit_sum == 0:
                await message.answer(f"<b>[–ò–≥—Ä—ã - –ë–æ—É–ª–∏–Ω–≥ üé≥]</b> {link_user(user_id)}, –¥–µ–Ω—å–≥–∏ –æ—Å—Ç–∞—é—Ç—Å—è —É –≤–∞—Å ({profit}x) {choice(joi)}\n"
                f"{check_balance(user_id, True)}", reply_markup=rates_inl('üé≥', user_id, "–ë–æ—É"))
            else:
                await message.answer(f"<b>[–ò–≥—Ä—ã - –ë–æ—É–ª–∏–Ω–≥ üé≥]</b> {link_user(user_id)}, –≤—ã –ø—Ä–æ–∏–≥—Ä–∞–ª–∏ {ranks_int(profit_sum*-1)}$ ({profit}x) {choice(sad)}\n"
                f"{check_balance(user_id, True)}", reply_markup=rates_inl('üé≥', user_id, "–ë–æ—É"))
        else:
            await message.answer(f"<b>[–ò–≥—Ä—ã - –ë–æ—É–ª–∏–Ω–≥ üé≥]</b> {link_user(user_id)}, —É –≤–∞—Å –Ω–µ –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤ {choice(sad)}")
    else:
        await message.answer(f"<b>[–ò–≥—Ä—ã - –ë–æ—É–ª–∏–Ω–≥ üé≥]</b> {link_user(user_id)}, –º–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —Å—Ç–∞–≤–∫–∞ 100$ {choice(info)}")

@dp.message_handler(lambda message: message.text.replace(" ", "").replace('k', '000').replace('–∫', '000').isdigit() and check_game(message.from_user.id)=='cup')
async def trigers_cup(message: types.Message):
    user_id = message.from_user.id
    user_url = message.from_user.url
    number = message.text.partition(' ')[0]
    sum_bid = message.text.partition(' ')[2]
    if sum_bid == '':
        await message.answer(f"üëª –°—Ç–∞–∫–∞–Ω—á–∏–∫ ‚ûú {link_user(user_id)}, –¥–ª—è –∏–≥—Ä—ã –≤ —Å—Ç–∞–∫–∞–Ω—á–∏–∫ –≤–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É —Å—Ç–∞–≤–∫–∏\n"
        f"{choice(info)} –°—É–º–º—É —Å—Ç–∞–≤–∫–∏ –º–æ–∂–Ω–æ —É–∫–∞–∑—ã–≤–∞—Ç—å —Ç–∞–∫ - 1 1000(—Å—Ç–∞–≤–∫–∞ 10–∫ –Ω–∞ 1 —Å—Ç–∞–∫–∞–Ω) –∏–ª–∏ —Å–ª–æ–≤–∞–º–∏ 1 –≤—Å–µ, 1 –≤–µ—Å—å(—Å—Ç–∞–≤–∫–∞ –≤—Å–µ–≥–æ –±–∞–ª–∞–Ω—Å–∞ –Ω–∞ 1 —Å—Ç–∞–∫–∞–Ω)")
    else:
        if int(sum_bid) >= 100:
            if check_money(int(sum_bid), user_id):
                sum_bid = int(sum_bid)
                right_number = randint(1, 3)
                if int(number) == int(right_number):
                    profit = choice(profit_cup)
                    add_money(int(sum_bid*profit), user_id)
                    await message.answer(f"<b>[–ò–≥—Ä—ã - –°—Ç–∞–∫–∞–Ω—á–∏–∫ ü•õ]</b> {link_user(user_id)}, {choice(right)},\n"
                    f"üí∏ –ü—Ä–∏–∑: +{ranks_int(int(sum_bid*choice(profit_cup)))}$ (x{profit}) {choice(joi)}\n"
                    f"{check_balance(user_id, True)}", reply_markup=cup_rates_inl(user_id, number, f'{sum_bid} {number}'))
                else:
                    withdraw_money(int(sum_bid), user_id)
                    await message.answer(f"<b>[–ò–≥—Ä—ã - –°—Ç–∞–∫–∞–Ω—á–∏–∫ ü•õ]</b> {link_user(user_id)}, {choice(wrong)}, —ç—Ç–æ –±—ã–ª —Å—Ç–∞–∫–∞–Ω—á–∏–∫ –ø–æ–¥ –Ω–æ–º–µ—Ä–æ–º ¬´{right_number}¬ª {choice(sad)}\n"
                    f"{choice(info)} –í–∞—à–∞ —Å—Ç–∞–≤–∫–∞ –æ–±–Ω—É–ª–∏–ª–∞—Å—å -{ranks_int(sum_bid)}$ {choice(sad)}\n"
                    f"{check_balance(user_id, True)}", reply_markup=cup_rates_inl(user_id, number, f'{sum_bid} {number}'))
            else:
                await message.answer(f"<b>[–ò–≥—Ä—ã - –°—Ç–∞–∫–∞–Ω—á–∏–∫ ü•õ]</b> {link_user(user_id)}, —É –≤–∞—Å –Ω–µ –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤ {choice(sad)}\n"
                f"{check_balance(user_id, True)}")
        else:
            await message.answer(f"<b>[–ò–≥—Ä—ã - –°—Ç–∞–∫–∞–Ω—á–∏–∫ ü•õ]</b> {link_user(user_id)}, –º–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —Å—Ç–∞–≤–∫–∞ 100$ {choice(info)}\n"
            f"{check_balance(user_id, True)}")