import asyncio

from random import choice, randint

from aiogram import types
from aiogram.types import CallbackQuery

from time import sleep
from data.config import *
from keyboards.inline import ikb_cube, ikb_stock
from loader import bot, dp
from sql_func import *
from utils.link_user import *
from utils.rates_user import *
from utils.cup_rates import *



@dp.callback_query_handler(lambda call: call.data.startswith("–°—Ç–∞–∫"))
async def cup_play(call: CallbackQuery):
    user_id = call.from_user.id
    add_game(user_id, 'cup')
    number = int(call.data.replace("–°—Ç–∞–∫ ", ""))
    await call.message.edit_text(f"<b>[–ò–≥—Ä—ã - ü•õ –°—Ç–∞–∫–∞–Ω—á–∏–∫]</b> {link_user(user_id)},\n–í—ã–±—Ä–∞–Ω —Å—Ç–∞–∫–∞–Ω—á–∏–∫ –ø–æ–¥ –Ω–æ–º–µ—Ä–æ–º ¬´{number}¬ª {choice(info)}\n"
    "ü•õ –ù–∞–ø–∏—à–∏ —Å—É–º–º—É —Å—Ç–∞–≤–∫–∏ 1 10–∫(–°—Ç–∞–≤–∫–∞ 10–∫ –Ω–∞ 1 —Å—Ç–∞–∫–∞–Ω—á–∏–∫)\n"
    f"{choice(info)} –ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —Å—Ç–∞–≤–∫–∞ 100$\n"
    f"{check_balance(user_id, True)}", reply_markup=cup_rates_inl(user_id, number))
    await bot.answer_callback_query(call.id, cache_time=5)

@dp.callback_query_handler(lambda call: call.data.startswith("–°—Ç–∞"))
async def cup_bid(call: CallbackQuery):
    print(122)
    user_url = call.from_user.url
    user_id = call.from_user.id
    sum_bid = int(call.data.split()[1])
    number = int(call.data.split()[2])
    right_number = randint(1, 3)
    if sum_bid >= 100:
        if check_money(int(sum_bid), user_id):
            if int(number) == int(right_number):
                profit = choice(profit_cup)
                add_money(int(sum_bid*profit), user_id)
                await call.message.edit_text(f"<b>[–ò–≥—Ä—ã - –°—Ç–∞–∫–∞–Ω—á–∏–∫ ü•õ]</b> {link_user(user_id)}, {choice(right)},\n"
                f"üí∏ –ü—Ä–∏–∑: +{ranks_int(int(sum_bid*choice(profit_cup)))}$ (x{profit}) {choice(joi)}\n"
                f"{check_balance(user_id, True)}", reply_markup=cup_rates_inl(user_id, number, f'{sum_bid} {number}'))
            else:
                withdraw_money(int(sum_bid), user_id)
                await call.message.edit_text(f"<b>[–ò–≥—Ä—ã - –°—Ç–∞–∫–∞–Ω—á–∏–∫ ü•õ]</b> {link_user(user_id)}, {choice(wrong)}, —ç—Ç–æ –±—ã–ª —Å—Ç–∞–∫–∞–Ω—á–∏–∫ –ø–æ–¥ –Ω–æ–º–µ—Ä–æ–º ¬´{right_number}¬ª {choice(sad)}\n"
                f"{choice(info)} –í–∞—à–∞ —Å—Ç–∞–≤–∫–∞ –æ–±–Ω—É–ª–∏–ª–∞—Å—å -{ranks_int(sum_bid)}$ {choice(sad)}\n"
                f"{check_balance(user_id, True)}", reply_markup=cup_rates_inl(user_id, number, f'{sum_bid} {number}'))
        else:
            await call.message.answer(f"<b>[–ò–≥—Ä—ã - –°—Ç–∞–∫–∞–Ω—á–∏–∫ ü•õ]</b> {link_user(user_id)}, —É –≤–∞—Å –Ω–µ –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤ {choice(sad)}\n"
            f"{check_balance(user_id, True)}")
    else:
        await call.message.answer(f"<b>[–ò–≥—Ä—ã - –°—Ç–∞–∫–∞–Ω—á–∏–∫ ü•õ]</b> {link_user(user_id)}, –º–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —Å—Ç–∞–≤–∫–∞ 100$ {choice(info)}\n"
        f"{check_balance(user_id, True)}")
    await bot.answer_callback_query(call.id, cache_time=50)

@dp.callback_query_handler(lambda call: call.data.startswith('–ö–∞–∑'))
async def casino_play(call: CallbackQuery):
    user_id = call.from_user.id
    sum_bid = int(call.data.split()[1])
    if sum_bid >= 100:
        if check_money(int(sum_bid), user_id):
            st_slot, nd_slot, rd_slot = choice(item_list), choice(item_list), choice(item_list)
            profit = round(item_profit.get(st_slot) + item_profit.get(nd_slot) + item_profit.get(rd_slot), 1)
            profit_sum = int(sum_bid * profit - sum_bid)
            add_money(profit_sum, user_id)
            if profit_sum > 0:
                await call.message.edit_text(f"<b>[–ò–≥—Ä—ã - –ö–∞–∑–∏–Ω–æ üé∞]</b> {link_user(user_id)}, –≤—ã –≤—ã–∏–≥—Ä–∞–ª–∏ {ranks_int(profit_sum)}$ {choice(joi)}\n"
                f"üé∞ –í—ã–ø–∞–ª–∏ —Å–ª–æ—Ç—ã: [{st_slot}|{nd_slot}|{rd_slot}] (x{profit})\n"
                f"{check_balance(user_id, True)}", reply_markup=rates_inl('üé∞', user_id, "–ö–∞–∑"))
            elif profit_sum == 0:
                await call.message.edit_text(f"<b>[–ò–≥—Ä—ã - –ö–∞–∑–∏–Ω–æ üé∞]</b> {link_user(user_id)}, –¥–µ–Ω—å–≥–∏ –æ—Å—Ç–∞—é—Ç—Å—è —É –≤–∞—Å {choice(joi)}\n"
                f"üé∞ –í—ã–ø–∞–ª–∏ —Å–ª–æ—Ç—ã: [{st_slot}|{nd_slot}|{rd_slot}] (x{profit})\n"
                f"{check_balance(user_id, True)}", reply_markup=rates_inl('üé∞', user_id, "–ö–∞–∑"))
            else:
                await call.message.edit_text(f"<b>[–ò–≥—Ä—ã - –ö–∞–∑–∏–Ω–æ üé∞]</b> {link_user(user_id)}, –≤—ã –ø—Ä–æ–∏–≥—Ä–∞–ª–∏ {ranks_int(profit_sum*-1)}$ {choice(sad)}\n"
                f"üé∞ –í—ã–ø–∞–ª–∏ —Å–ª–æ—Ç—ã: [{st_slot}|{nd_slot}|{rd_slot}] (x{profit})\n"
                f"{check_balance(user_id, True)}", reply_markup=rates_inl('üé∞', user_id, "–ö–∞–∑"))
        else:
            await call.message.edit_text(f"<b>[–ò–≥—Ä—ã - –ö–∞–∑–∏–Ω–æ üé∞]</b> {link_user(user_id)}, —É –≤–∞—Å –Ω–µ –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤ {choice(sad)}")
    else:
        await call.message.edit_text(f"<b>[–ò–≥—Ä—ã - –ö–∞–∑–∏–Ω–æ üé∞]</b> {link_user(user_id)}, –º–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —Å—Ç–∞–≤–∫–∞ 100$ {choice(info)}")
    await bot.answer_callback_query(call.id, cache_time=5)

@dp.callback_query_handler(lambda call: call.data.startswith("–§—É—Ç"))
async def football(call: CallbackQuery):
    user_id = call.from_user.id
    chat_id = call.message.chat.id
    sum_bid = int(call.data.split()[1])
    if sum_bid >= 100:
        if check_money(sum_bid, user_id):
            dice_msg = await bot.send_dice(chat_id, emoji='‚öΩ')
            football_num = dice_msg.dice.value
            profit = football_profit.get(football_num)
            profit_sum = int(sum_bid * profit - sum_bid)
            add_money(profit_sum, user_id)
            await asyncio.sleep(4.9)
            if profit_sum > 0:
                await call.message.answer(f"<b>[–ò–≥—Ä—ã - –§—É—Ç–±–æ–ª ‚öΩ]</b> {link_user(user_id)}, –≤—ã –≤—ã–∏–≥—Ä–∞–ª–∏ {ranks_int(profit_sum)}$ ({profit}x) {choice(joi)}\n"
                f"{check_balance(user_id, True)}", reply_markup=rates_inl('‚öΩ', user_id, "–§—É—Ç"))
            elif profit_sum == 0:
                await call.message.answer(f"<b>[–ò–≥—Ä—ã -  –§—É—Ç–±–æ–ª ‚öΩ]</b> {link_user(user_id)}, –¥–µ–Ω—å–≥–∏ –æ—Å—Ç–∞—é—Ç—Å—è —É –≤–∞—Å ({profit}x) {choice(joi)}\n"
                f"{check_balance(user_id, True)}", reply_markup=rates_inl('‚öΩ', user_id, "–§—É—Ç"))
            else:
                await call.message.answer(f"<b>[–ò–≥—Ä—ã -  –§—É—Ç–±–æ–ª ‚öΩ]</b> {link_user(user_id)}, –≤—ã –ø—Ä–æ–∏–≥—Ä–∞–ª–∏ {ranks_int(profit_sum*-1)}$ ({profit}x) {choice(sad)}\n"
                f"{check_balance(user_id, True)}", reply_markup=rates_inl('‚öΩ', user_id, "–§—É—Ç"))
        else:
            await call.message.answer(f"<b>[–ò–≥—Ä—ã - –§—É—Ç–±–æ–ª ‚öΩ]</b> {link_user(user_id)}, —É –≤–∞—Å –Ω–µ –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤ {choice(sad)}")
    else:
        await call.message.answer(f"<b>[–ò–≥—Ä—ã - –§—É—Ç–±–æ–ª ‚öΩ]</b> {link_user(user_id)}, –º–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —Å—Ç–∞–≤–∫–∞ 100$ {choice(info)}")

    await bot.answer_callback_query(call.id, cache_time=5)


@dp.callback_query_handler(lambda call: call.data.startswith("–ö—É–±"))
async def cube_play(call: CallbackQuery):
    user_id = call.from_user.id
    number = int(call.data.replace("–ö—É–± ", ""))
    right_number = randint(1,6)
    if right_number == number:
        add_money(1000000, user_id)
        await call.message.edit_text(f"<b>[–ò–≥—Ä—ã - –ö—É–±–∏–∫ üé≤]</b> {link_user(user_id)}, {choice(right)} {choice(joi)}\n"
        "üí∏ –ü—Ä–∏–∑: 1kk$\n"
        f"{check_balance(user_id, True)}", reply_markup=ikb_cube)
    else:
        add_money(10000, user_id)
        await call.message.edit_text(f"<b>[–ò–≥—Ä—ã - –ö—É–±–∏–∫ üé≤]</b> {link_user(user_id)}, {choice(wrong)}, —ç—Ç–æ –±—ã–ª–æ —á–∏—Å–ª–æ ¬´{right_number}¬ª {choice(sad)}\n"
        f"üí∏ –ü—Ä–∏–∑ 10k$\n"
        f"{check_balance(user_id, True)}", reply_markup=ikb_cube)
    await bot.answer_callback_query(call.id, cache_time=5)


@dp.callback_query_handler(lambda call: call.data.startswith("–î–∞—Ä"))
async def darts(call: CallbackQuery):
    user_id = call.from_user.id
    chat_id = call.message.chat.id
    sum_bid = int(call.data.split()[1])
    if sum_bid >= 100:
        if check_money(sum_bid, user_id):
            dice_msg = await bot.send_dice(chat_id, emoji='üéØ')
            darts_num = dice_msg.dice.value
            profit = darts_profit.get(darts_num)
            profit_sum = int(sum_bid * profit - sum_bid)
            add_money(profit_sum, user_id)
            await asyncio.sleep(4.9)
            if profit_sum > 0:
                await call.message.answer(f"<b>[–ò–≥—Ä—ã - –î–∞—Ä—Ç—Å üéØ]</b> {link_user(user_id)}, –≤—ã –≤—ã–∏–≥—Ä–∞–ª–∏ {ranks_int(profit_sum)}$ ({profit}x) {choice(joi)}\n"
                f"{check_balance(user_id, True)}", reply_markup=rates_inl('üéØ', user_id, "–î–∞—Ä"))
            elif profit_sum == 0:
                await call.message.answer(f"<b>[–ò–≥—Ä—ã - –î–∞—Ä—Ç—Å üéØ]</b> {link_user(user_id)}, –¥–µ–Ω—å–≥–∏ –æ—Å—Ç–∞—é—Ç—Å—è —É –≤–∞—Å ({profit}x) {choice(joi)}\n"
                f"{check_balance(user_id, True)}", reply_markup=rates_inl('üéØ', user_id, "–î–∞—Ä"))
            else:
                await call.message.answer(f"<b>[–ò–≥—Ä—ã - –î–∞—Ä—Ç—Å üéØ]</b> {link_user(user_id)}, –≤—ã –ø—Ä–æ–∏–≥—Ä–∞–ª–∏ {ranks_int(profit_sum*-1)}$ ({profit}x) {choice(sad)}\n"
                f"{check_balance(user_id, True)}", reply_markup=rates_inl('üéØ', user_id, "–î–∞—Ä"))
        else:
            await call.message.answer(f"<b>[–ò–≥—Ä—ã - –î–∞—Ä—Ç—Å üéØ]</b> {link_user(user_id)}, —É –≤–∞—Å –Ω–µ –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤ {choice(sad)}")
    else:
        await call.message.answer(f"<b>[–ò–≥—Ä—ã - –î–∞—Ä—Ç—Å üéØ]</b> {link_user(user_id)}, –º–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —Å—Ç–∞–≤–∫–∞ 100$ {choice(info)}")


@dp.callback_query_handler(lambda call: call.data.startswith("–ê–∫—Ü"))
async def stock_play(call: CallbackQuery):
    user_id = call.from_user.id
    number = call.data.replace("–ê–∫—Ü ", "")
    price = price_stock.get(int(number))
    if check_money(sum_money=price, id=user_id) is False:
        await call.message.answer(f"<b>[–ò–≥—Ä—ã - –ê–∫—Ü–∏–∏ üìà]</b> {link_user(user_id)}, —É –≤–∞—Å –Ω–µ –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤ {choice(sad)}\n"
        f"üí∏ –°—Ç–æ–∏–º–æ—Å—Ç—å –∞–∫—Ü–∏–∏: {ranks_int(price)}$\n"
        f"{check_balance(user_id, True)}\n", reply_markup=ikb_stock)
    else:
        multiply = choice(profit)
        income = int(price * multiply - price)
        add_money(sum_money=income, id=user_id)
        if income>0:
            await call.message.edit_text(f"<b>[–ò–≥—Ä—ã - –ê–∫—Ü–∏–∏ üìà]</b> {link_user(user_id)}, –≤—ã –≤—ã–∏–≥—Ä–∞–ª–∏ {ranks_int(income)}$ (x{multiply}) {choice(joi)}\n"
            f"{check_balance(user_id, True)}\n"
            "‚¨á –í—ã–±–µ—Ä–∏ –Ω–æ–º–µ—Ä –∞–∫—Ü–∏–∏ –Ω–∏–∂–µ —á—Ç–æ –±—ã –∫—É–ø–∏—Ç—å –µ–µ üí∏", reply_markup=ikb_stock)
        elif income == 0:
            await call.message.edit_text(f"<b>[–ò–≥—Ä—ã - –ê–∫—Ü–∏–∏ üìà]</b> {link_user(user_id)}, –≤–∞—à–∏ –¥–µ–Ω—å–≥–∏ –æ—Å—Ç–∞—é—Ç—Å—è —É –≤–∞—Å (x{multiply}) {choice(joi)}\n"
            f"{check_balance(user_id, True)}\n"
            "‚¨á –í—ã–±–µ—Ä–∏ –Ω–æ–º–µ—Ä –∞–∫—Ü–∏–∏ –Ω–∏–∂–µ —á—Ç–æ –±—ã –∫—É–ø–∏—Ç—å –µ–µ üí∏", reply_markup=ikb_stock)
        else:
            await call.message.edit_text(f"<b>[–ò–≥—Ä—ã - –ê–∫—Ü–∏–∏ üìà]</b> {link_user(user_id)}, –≤—ã –ø—Ä–æ–∏–≥—Ä–∞–ª–∏ {ranks_int(income*-1)}$ (x{multiply}) {choice(sad)}\n"
            f"{check_balance(user_id, True)}\n"
            "‚¨á –í—ã–±–µ—Ä–∏ –Ω–æ–º–µ—Ä –∞–∫—Ü–∏–∏ –Ω–∏–∂–µ —á—Ç–æ –±—ã –∫—É–ø–∏—Ç—å –µ–µ üí∏", reply_markup=ikb_stock)
    await bot.answer_callback_query(call.id, cache_time=5)
    
